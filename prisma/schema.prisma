generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  role          Roles    @default(USER)
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model NetworkUpgrades {
  id                  Int                   @id @default(autoincrement())
  name                String
  consideredProposals ConsideredProposals[]
  desc1               String?               @default("")
  desc2               String?               @default("")
  embedLink           String?               @default("")
  resources           UpgradeResources[]
  updates             UpgradeUpdates[]
  videos              UpgradeVideos[]

  @@unique([name])
}

model ConsideredProposals {
  id                Int              @id @default(autoincrement())
  name              String?          @default("")
  description       String?          @default("")
  discussionLink    String?          @default("")
  proposalLink      String?          @default("")
  videoLink         String?          @default("")
  NetworkUpgrades   NetworkUpgrades? @relation(fields: [networkUpgradesId], references: [id])
  networkUpgradesId Int?
}

model UpgradeResources {
  id                Int              @id @default(autoincrement())
  link              String?          @default("")
  title             String?          @default("")
  NetworkUpgrades   NetworkUpgrades? @relation(fields: [networkUpgradesId], references: [id])
  networkUpgradesId Int?
}

model UpgradeUpdates {
  id                Int              @id @default(autoincrement())
  link              String?          @default("")
  title             String?          @default("")
  linkTitle         String?          @default("")
  date              String           @default("")
  NetworkUpgrades   NetworkUpgrades? @relation(fields: [networkUpgradesId], references: [id])
  networkUpgradesId Int?
}

model UpgradeVideos {
  id                Int              @id @default(autoincrement())
  link              String?          @default("")
  title             String?          @default("")
  NetworkUpgrades   NetworkUpgrades? @relation(fields: [networkUpgradesId], references: [id])
  networkUpgradesId Int?
}

model Blogs {
  id    Int     @id @default(autoincrement())
  title String? @default("")
  link  String? @default("")
  date  String? @default("")
}

model Events {
  id         Int     @id @default(autoincrement())
  name       String? @default("")
  link1      String? @default("")
  link2      String? @default("")
  link3      String? @default("")
  linktitle1 String? @default("")
  linktitle2 String? @default("")
  linktitle3 String? @default("")
}

model YoutubeLink {
  id    Int     @id @default(autoincrement())
  link  String? @default("")
  title String? @default("")
}

model Surveys {
  id        Int     @id @default(autoincrement())
  completed Boolean @default(false)
  link      String? @default("")
  title     String? @default("")
}

model Feedback {
  id       Int     @id @default(autoincrement())
  approved Boolean @default(false)
  name     String? @default("")
  social   String? @default("")
  feedback String? @default("")
  image    String? @default("")
}

model Members {
  id          Int     @id @default(autoincrement())
  name        String? @default("")
  description String? @default("")
  twitter     String? @default("")
  github      String? @default("")
  image       String? @default("")
  role        String? @default("")
}

model EIP {
  id        Int            @id @default(autoincrement())
  title     String?        @default("")
  resources EIPResources[]
}

model EIPResources {
  id    Int     @id @default(autoincrement())
  link  String? @default("")
  title String? @default("")
  type  EipResourceType @default(BLOG)
  EIP   EIP?    @relation(fields: [eipId], references: [id])
  eipId Int?
}

model Meetings{
  id        Int     @id @default(autoincrement())
  title     String? @default("")
  issuesLink String? @default("")
  videoLink String? @default("")
  notes String? @default("")
}

enum EipResourceType{
  BLOG
  VIDEO
  DISCUSSIONS
}

enum Roles{
  ADMIN
  USER
  OWNER
}